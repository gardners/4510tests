	 .include "test_top.a65"

         .byte 145,"$00 - BRK"

	 .include "test_prepare.a65"

         ; perform one test
next:    	 

         ; expect SP to be decremented by 3
	 lda sbefore
	 sec
	 sbc #$03
	 sta sresult

	 ; D value here is the low byte of the return address pushed
	 ; to the stack, which should be one byte after the BRK, i.e.,
	 ; cmd+2
	 lda #<cmd+2
	 sta dresult

	 ; expect B and I flag to be set
         lda pbefore
	 ora #$14
	 sta presult

	 .include "test_rom_off.a65"

	 ; write IRQ vector
	 lda #<brkroutine
	 sta $FFFE
	 lda #>brkroutine
	 sta $FFFF

	 ; load registers for test
	 .include "test_setup.a65"
cmd:
         ; test instruction
    	 brk

	 ; BRK should trigger an IRQ vector entry, so this should not
	 ; be reached.
	 nop
	 .include "test_rom_on.a65"
	 jsr print
	 .byte 13, "EXECUTION CONTINUED PAST BRK", 13, 0
	 jmp error

brkroutine:
	 .include "test_record.a65"

	 ; get D result from the stack
	 inx
	 inx
	 lda $100,x
	 sta dafter	 

	 .include "test_rom_on.a65"

	 ; do standard checks
	 jsr check

	 ; iterate to next test
	 ; (try all values of SP and processor flags)
         dec sbefore
         ; if not finished, then do next test
jmpnext: bne next
         inc pbefore
         bne jmpnext

	 .include "test_common.a65"

	 ; name of next test
printname: jsr print
name:    .byte "01ORA"
nameend: .byte 0
	 rts
