	 .include "test_top.a65"

         .byte 145,"$04 - TSB $NN"

	 .include "test_prepare.a65"

         ; perform one test
next:    	 
         ; D value is the value stored in the memory address being
	 ; used, and which gets written into the operand of the
	 ; instruction
	 .include "test_setup_zp.a65"

	 lda dbefore
	 ora abefore
	 sta dresult

	 ; set Z flag if required (but TSB doesn't touch N)
	 ; note that for TSB/TRB the criteria for Z is the intersect
	 ; between A and D, not whether the result is zero (since for
	 ; TSB it will be the union)
	 lda dbefore
	 and abefore
	 bne +
	 lda presult
	 ora #%00000010 
	 sta presult
*
	 lda abefore
	 sta aresult	 

	 ; load registers for test
	 .include "test_setup.a65"
cmd:
         ; test instruction
    	 TSB $00

	 .include "test_record.a65"	 
	 
	 lda $fd
	 sta dafter
	 
	 ; do standard checks
	 jsr check

	 .include "test_next_alu.a65"
	 .include "test_common.a65"

	 ; name of next test
printname: jsr print
name:    .byte "05ORA"
nameend: .byte 0
	 rts
