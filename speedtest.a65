
	 .word $0801
	 .org $0801

	 .scope
	 .word _next, 10                       ; Next line and current line number
	 .byte $97, "2,0:", $9e, " 2014", $AA, "65",0      ; POKE 2,0 : SYS 2014+65
_next:	 .word 0

	 .checkpc 2079
	 .advance 2079

	 sei

	 lda #$00
	 sta irqcount

	 ; setup raster interrupt
	 lda #<irq
	 sta $0314
	 lda #>irq
	 sta $0315

	 lda #$fe
	 sta $D012
	 lda #$1b
	 sta $D011
	 lda #$01
	 sta $d01a
	 lda #$7f
	 sta $dc0d

	 lda #$00
	 sta b0
	 sta b1
	 sta b2
	 sta b3

	 tax
	 tay

	 ; wait until raster $0FF
l1:	 lda $d012
	 cmp #$ff
	 bne l1
	 cli

 loop:
	 ; do a variety of instructions
	 ; of different kinds and addressing modes
	 lda b0
	 eor $d020
	 sta $0400,x
	 sec
	 adc ($fd),y
	 clc
	 lda ($fd,x)
	 pha
	 inc $07ff	 
	 pla
	 inx
	 cld

	 inc b0
	 bne l2
	 inc b1
	 bne l2
	 inc b2
	 bne l2
	 inc b3

l2:
	 lda irqcount
	 cmp #$60
	 bcc loop

	 ; return irq to normal
	 sei
	 lda #$00
	 sta $d01a
	 lda #$81
	 sta $dc0d
	 lda #<$ea31
	 sta $0314
	 lda #>$ea31
	 sta $0315
	 inc $d019

	 ; print results
	 
	 ; PAL C64 completes 27889 = 108*256+241 loops in 60 frames.
	 ; NTSC C64 completes ~5/6 of that = 90*256+201.
	 lda b0
	 sta n0
	 lda b1
	 sta n1
	 lda b2
	 sta n2
	 lda b3
	 sta n3

	 lda #$00
	 sta s0
	 sta s1
l3:
	 ; subtract number of cycles a real C64 performs
	 sec
	 lda b0
	 sbc #200    ; could be 241, but lets allow a little bit of margin
	 sta b0
	 lda b1
	 sbc #108
	 sta b1
	 lda b2
	 sbc #$00
	 sta b2
	 lda b3
	 sbc #$00
	 sta b3

	 lda b3
	 bmi donespeed

	 inc s0
	 bne l3
	 inc s1
	 jmp l3

donespeed:
	 lda #$93
	 jsr $ffd2

	 lda s1
	 ldx s0
	 jsr $bdcd

	 lda #<msg
	 ldy #>msg
	 jsr $ab1e

	 lda #$00
	 sta s0
	 sta s1
l4:
	 ; subtract number of cycles a real NTSC C64 performs
	 sec
	 lda n0
	 sbc #180    ; could be 201, but lets allow a little bit of margin
	 sta n0
	 lda n1
	 sbc #90
	 sta n1
	 lda n2
	 sbc #$00
	 sta n2
	 lda n3
	 sbc #$00
	 sta n3

	 lda n3
	 bmi donespeed2

	 inc s0
	 bne l4
	 inc s1
	 jmp l4

donespeed2:
	 lda #$0d
	 jsr $ffd2

	 lda s1
	 ldx s0
	 jsr $bdcd

	 lda #<msgntsc
	 ldy #>msgntsc
	 jsr $ab1e


	 rts

irq:
	inc $d019
	inc $d020
	inc irqcount
	jmp $ea81

irqcount:	.byte 0
s0:		.byte 0
s1:		.byte 0
b0:		.byte 0
b1:		.byte 0
b2:		.byte 0
b3:		.byte 0
n0:		.byte 0
n1:		.byte 0
n2:		.byte 0
n3:		.byte 0

msg:
	.byte "X PAL C64 INSTRUCTIONS/FRAME"
	.byte 13,0
msgntsc:
	.byte "X NTSC C64 INSTRUCTIONS/FRAME"
	.byte 13,0

	.scend