         ; restore all registers and stack
saves:   ldx #0
         txs
         ldx #0
s1:      lda $1000,x
         sta $0100,x
         inx
         bne s1

         ; announce success
         jsr print
         .byte " - OK"
         .byte 13,0
         ; decide whether to auto-load next
         ; test
         lda 2
         beq load
wait:    jsr $ffe4
         beq wait
         jmp $8000

         ; load next test
load:    jsr printname
	 	 
         lda #0
         sta $0a
         sta $b9
         lda #nameend-name
         sta $b7
         lda #<name
         sta $bb
         lda #>name
         sta $bc
         pla
         pla
         jmp $e16f

dbefore:      .byte 0
abefore:      .byte 0
bbefore:      .byte 0
xbefore:      .byte 0
ybefore:      .byte 0
zbefore:      .byte 0
pbefore:      .byte 0
sbefore:      .byte 0
dafter:      .byte 0
aafter:      .byte 0
bafter:      .byte 0
xafter:      .byte 0
yafter:      .byte 0
zafter:      .byte 0
pafter:      .byte 0
safter:      .byte 0
dresult:      .byte 0
aresult:      .byte 0
bresult:      .byte 0
xresult:      .byte 0
yresult:      .byte 0
zresult:      .byte 0
presult:      .byte 0
sresult:      .byte 0

check:   ; check that
         lda dafter
         cmp dresult
         bne error
         lda aafter
         cmp aresult
         bne error
         lda bafter
         cmp bresult
         bne error
         lda xafter
         cmp xresult
         bne error
         lda yafter
         cmp yresult
         bne error
         lda zafter
         cmp zresult
         bne error
         lda pafter
         cmp presult
         bne error
         lda safter
         cmp sresult
         bne error
         rts

error:   jsr print
	 .byte 13,"        D  A  B  X  Y  Z  FLAGS    SP"
         .byte 13
         .byte "BEFORE  ", 0
         ldx #<dbefore
         ldy #>dbefore
         jsr showregs
         jsr print
         .byte 13
         .byte "AFTER   ", 0
         ldx #<dafter
         ldy #>dafter
         jsr showregs
         jsr print
         .byte 13
         .byte "RIGHT   ", 0
         ldx #<dresult
         ldy #>dresult
         jsr showregs
         lda #13
         jsr $ffd2
wait2:    jsr $ffe4
         beq wait2
         cmp #3
         beq stop
         rts
stop:    lda 2
         beq basic
         jmp $8000
basic:   jmp ($a002)

showregs: stx 172
         sty 173
         ldy #0
         lda (172),y
         jsr hexb
         lda #32
         jsr $ffd2
         iny
         lda (172),y
         jsr hexb
         lda #32
         jsr $ffd2
         iny
         lda (172),y
         jsr hexb
         lda #32
         jsr $ffd2
         iny
         lda (172),y
         jsr hexb
         lda #32
         jsr $ffd2
         iny
         lda (172),y
         jsr hexb
         lda #32
         jsr $ffd2
         iny
         lda (172),y
         jsr hexb
         lda #32
         jsr $ffd2
         iny
         lda (172),y
         ldx #'N
         asl
         bcc ok7
         ldx #'n
ok7:     pha
         txa
         jsr $ffd2
         pla
         ldx #'V
         asl
         bcc ok6
         ldx #'v
ok6:     pha
         txa
         jsr $ffd2
         pla
         ldx #'E
         asl
         bcc ok5
         ldx #'e
ok5:     pha
         txa
         jsr $ffd2
         pla
         ldx #'B
         asl
         bcc ok4
         ldx #'b
ok4:     pha
         txa
         jsr $ffd2
         pla
         ldx #'D
         asl
         bcc ok3
         ldx #'d
ok3:     pha
         txa
         jsr $ffd2
         pla
         ldx #'I
         asl
         bcc ok2
         ldx #'i
ok2:     pha
         txa
         jsr $ffd2
         pla
         ldx #'Z
         asl
         bcc ok1
         ldx #'z
ok1:     pha
         txa
         jsr $ffd2
         pla
         ldx #'C
         asl
         bcc ok0
         ldx #'c
ok0:     pha
         txa
         jsr $ffd2
         pla
         lda #32
         jsr $ffd2
         iny
         lda (172),y
	 ; fall through to print last byte

hexb:    ; print a byte as hex
	 pha
         lsr
         lsr
         lsr
         lsr
         jsr hexn
         pla
         and #$0f
hexn:    ora #$30
         cmp #$3a
         bcc hexn0
         adc #6
hexn0:   jmp $ffd2

print:   pla
         sta print0+1
         pla
         sta print0+2
         ldx #1
print0:  lda $ffff,x    ; address gets overwritten
         beq print1
         jsr $ffd2
         inx
         bne print0
print1:  sec
         txa
         adc print0+1
         sta print2+1
         lda #0
         adc print0+2
         sta print2+2
print2:  jmp $ffff      ; address gets overwritten

	 .scend
