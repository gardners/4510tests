	 .include "test_top.a65"

         .byte 145,"$08 - PHP"

	 .include "test_prepare.a65"

         ; perform one test
next:    	 
	 .include "test_setup_identity.a65"

	 lda #$00
	 sta dresult

	 .include "test_setup_push.a65"

	 ; PHP pushes flags, but with B set.
	 lda pbefore
	 ora #%00010000
	 sta presult
	 
	 ; load registers for test
	 .include "test_setup.a65"
cmd:
         ; test instruction
    	 php

	 .include "test_record.a65"

	 ; do standard checks
	 jsr check

	 ; iterate to next test
	 ; (try all values of SP and processor flags)
         dec sbefore
         ; if not finished, then do next test
jmpnext: bne next
         inc pbefore
         bne jmpnext

	 .include "test_common.a65"

	 ; name of next test
printname: jsr print
name:    .byte "09ORA"
nameend: .byte 0
	 rts
